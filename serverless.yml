service: paraphraser
useDotenv: true
# app and org for use with dashboard.serverless.com
app: paraphraser-rss
#org: your-org-name
custom:
  dynamoSourceMetaTableName: 'SourceMeta-${sls:stage}'
  dynamoServeMetaTableName: 'ServeMeta-${sls:stage}'
  sourceStepFunctionName: 'SourceStep-${sls:stage}'
  s3SourceBucketName: 'autonews-${env:S3_BUCKET_PREFIX}-source-${sls:stage}'
  s3ServeBucketName: 'autonews-${env:S3_BUCKET_PREFIX}-serve-${sls:stage}'
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    SOURCE_BUCKET: ${self:custom.s3SourceBucketName}
    SOURCE_META_TABLE: ${self:custom.dynamoSourceMetaTableName}
    SCRAPE_QUEUE_URL: ${construct:scrapeQueue.queueUrl}
    SERVE_BUCKET: ${self:custom.s3ServeBucketName}
    SERVE_META_TABLE: ${self:custom.dynamoServeMetaTableName}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - { "Fn::GetAtt": [ "DynamoSourceMeta", "Arn" ] }
            - "Fn::Join": [ '/', [ "Fn::GetAtt": [ DynamoSourceMeta, Arn ], 'index', 'linkIndex' ] ]
        - Effect: Allow
          Action:
            - 's3:*'
          Resource: '*'

plugins:
  - serverless-plugin-include-dependencies
  - serverless-step-functions
  - serverless-lift
functions:
  generateBBCMeta:
    handler: generator/sources/rss/bbc/bbc.getMeta
  filterForDynamo:
    handler: generator/source-db-filter.filter
  transformForDynamo:
    handler: generator/source-db-transform.dynamo
  batchWriteToDynamo:
    handler: generator/source-db-write.dynamo
  pushSourceMetaToScrapeQueue:
    handler: generator/source-db-queue.push
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ DynamoSourceMeta, StreamArn ]
  processScrapeQueue:
    handler: generator/sources/rss/bbc/bbc.scrape
    events:
      - sqs:
          arn: ${construct:scrapeQueue.queueArn}
          maximumConcurrency: 5
  processSourceFiles:
    handler: paraphraser/paraphrase.go
    timeout: 200 # ChatGPT response can be slow so added increased timeout for this
    events:
      - s3:
          bucket: ${self:custom.s3SourceBucketName}
          event: s3:ObjectCreated:*

stepFunctions:
  stateMachines:
    paraphraser:
      name: ${self:custom.sourceStepFunctionName}
      definition:
        Comment: 'Gather new source documents to paraphrase into articles'
        StartAt: ConsumeRSSFeeds
        States:
          ConsumeRSSFeeds:
            Type: Parallel
            Branches:
              - StartAt: Pass
                States:
                  Pass:
                    Type: Pass
                    End: true
              - StartAt: BBC
                States:
                  BBC:
                    Comment: Consume the current live RSS feed for the BBC and extract meta information
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ generateBBCMeta, Arn ]
                    Next: DynamoFilter
                  DynamoFilter:
                    Comment: Filter articles that already exist in the article meta dynamo table
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ filterForDynamo, Arn ]
                    Next: DynamoTransform
                  DynamoTransform:
                    Comment: Transform the meta JSON into dynamo items
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ transformForDynamo, Arn ]
                    Next: DynamoBatchWrite
                  DynamoBatchWrite:
                    Comment: Write to Dynamo in batches of 25 items
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ batchWriteToDynamo, Arn ]
                    End: true
            End: true
resources:
  Resources:
    DynamoSourceMeta:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoSourceMetaTableName}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: link
            AttributeType: S

        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        Tags:
          - Key: Paraphraser
            Value: Paraphraser
        GlobalSecondaryIndexes:
          - IndexName: linkIndex
            KeySchema:
              - AttributeName: link
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    DynamoServeMeta:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoServeMetaTableName}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: link
            AttributeType: S
          - AttributeName: sourceId
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        Tags:
          - Key: Paraphraser
            Value: Paraphraser
        GlobalSecondaryIndexes:
          - IndexName: linkIndex
            KeySchema:
              - AttributeName: link
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: sourceIdIndex
            KeySchema:
              - AttributeName: sourceId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    S3ServeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3ServeBucketName}
constructs:
  scrapeQueue:
    type: queue
    worker:
      handler: generator/sources/rss/bbc/bbc.scrapeArticle

outputs:
  NewOutput:
    Description: "Description for the output"
    Value: "Some output value"
